#include <behaviors.dtsi>
#include <input/processors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/input_transform.h>

#define DEF 0
#define MOUSE 1
#define SYM 2
#define NUM 3
#define FN 4
#define GENSHIN 5 

#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24  
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define THUMBS 30 31 32 33 34 35  

&sk {
  release-after-ms = <600>;
  quick-release;
};

&sl {
  ignore-modifiers;
};

&mt {
  flavor = "tap-preferred";
};

&lt {
  flavor = "balanced";
  tapping-term-ms = <200>;
  quick-tap-ms = <175>;
};

&caps_word {
  /delete-property/ ignore-modifiers;
};

/ {
  trackball_listener {
    compatible = "zmk,input-listener";
    device = <&vtrackball>;

    snipe {
      layers = <NUM>;
      input-processors = <&zip_xy_scaler 1 3>;
    };

    scroll {
      layers = <SYM>;
      input-processors = <&zip_xy_transform (INPUT_TRANSFORM_Y_INVERT)>, <&zip_xy_scaler 1 3>, <&zip_xy_to_scroll_mapper>;
    };

    move {
      layers = <DEF MOUSE>;
      input-processors = <&auto_mouse_layer MOUSE 5000>;
    };
  };

  auto_mouse_layer: auto_mouse_layer {
    compatible = "zmk,input-processor-temp-layer";
    #input-processor-cells = <2>;
    require-prior-idle-ms = <500>;
    excluded-positions = <30 31 32 16 17 18 10 11 12 13 22 23>;
  };

  behaviors {
    hml: hml {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "balanced";
      tapping-term-ms = <2000>;
      quick-tap-ms = <175>;
      require-prior-idle-ms = <250>;
      hold-trigger-key-positions = <KEYS_R THUMBS>;
      hold-trigger-on-release;
      bindings =
        <&kp>,
        <&kp>;
    };

    hmr: hmr {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "balanced";
      tapping-term-ms = <2000>;
      quick-tap-ms = <175>;
      require-prior-idle-ms = <250>;
      hold-trigger-key-positions = <KEYS_L THUMBS>;
      hold-trigger-on-release;
      bindings =
        <&kp>,
        <&kp>;
    };
    hml_s: hml_s {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "balanced";
      tapping-term-ms = <2000>;
      quick-tap-ms = <175>;
      require-prior-idle-ms = <0>;
      hold-trigger-key-positions = <KEYS_R THUMBS>;
      hold-trigger-on-release;
      bindings =
        <&kp>,
        <&kp>;
    };

    hmr_s: hmr_s {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "balanced";
      tapping-term-ms = <2000>;
      quick-tap-ms = <175>;
      require-prior-idle-ms = <0>;
      hold-trigger-key-positions = <KEYS_L THUMBS>;
      hold-trigger-on-release;
      bindings =
        <&kp>,
        <&kp>;
    };


    smart_shft: smart_shft {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&sk LSHIFT>, <&caps_word>;
      mods = <(MOD_LSFT)>;
    };
  };

  combos {
    compatible = "zmk,combos";
    combo_normal {
      timeout-ms = <20>;
      key-positions = <7 8>;
      bindings = <&to DEF>;
    };

    combo_fn {
      timeout-ms = <20>;
      key-positions = <27 28>;
      bindings = <&sl FN>;
    };
    combo_genshin {
      timeout-ms = <20>;
      key-positions = <5 9>;
      bindings = <&to GENSHIN>;
    };
    combo_esc {
      timeout-ms = <20>;
      key-positions = <1 2>;
      bindings = <&kp ESCAPE>;
    };
    combo_tab {
      timeout-ms = <20>;
      key-positions = <2 3>;
      bindings = <&kp TAB>;
    };
    combo_cdel {
      timeout-ms = <20>;
      key-positions = <11 12>;
      bindings = <&kp LC(BACKSPACE)>;
    };
    combo_unlock {
      timeout-ms = <20>;
      key-positions = <0 4>;
      bindings = <&studio_unlock>;
    };
    combo_reset_left {
      timeout-ms = <20>;
      key-positions = <20 24>;
      bindings = <&sys_reset>;
    };
    combo_reset_right {
      timeout-ms = <20>;
      key-positions = <25 29>;
      bindings = <&sys_reset>;
    };
  };
  chosen {
    zmk,physical-layout = &charybdis_5col_layout;
  };

  keymap {
    compatible = "zmk,keymap";

    Base {
      bindings = <
        &kp FSLH    &kp W       &kp F           &kp P        &kp B                  &kp J             &kp L                      &kp U        &kp Y       &kp SEMI
        &hml LGUI A &hml LALT R &hml LSHFT S    &hml LCTRL T &kp G                  &kp M             &hmr RCTRL N               &hmr RSHFT E &hmr RALT I &hmr LGUI O
        &kp Z       &mt LC(X) X &mt LC(C) C     &kp D        &mt LC(V) V            &kp K             &kp H                      &kp COMMA    &kp DOT     &kp Q
                                &mt LGUI ESCAPE &smart_shft  &lt SYM SPACE          &lt NUM BACKSPACE &mt LS(LC(LEFT_ALT)) ENTER
      >;
    };

    Mouse {
      bindings = <
        &trans   &trans   &trans    &trans    &trans            &trans &trans   &trans   &trans   &trans
        &kp LGUI &kp LALT &kp LSHFT &kp LCTRL &trans            &trans &mkp MB1 &mkp MB2 &mkp MB3 &trans 
        &trans   &trans   &mo 3     &mo 2     &trans            &trans &trans   &trans   &trans   &trans 
                          &mkp MB1  &mkp MB2  &mkp MB3          &trans &trans
      >;
    };

    Sym {
      bindings = <
        &none &none &kp LEFT_BRACE       &kp RIGHT_BRACE       &kp PIPE              &kp GRAVE &kp TILDE &kp LESS_THAN &kp GREATER_THAN &kp BACKSLASH        
        &none &none &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp COLON             &kp PLUS  &kp MINUS &kp SLASH     &kp ASTRK        &kp SINGLE_QUOTE    
        &none &none &kp LEFT_BRACKET     &kp RIGHT_BRACKET     &kp QUESTION          &kp AMPS  &kp EQUAL &kp UNDER     &kp PERIOD       &kp DOUBLE_QUOTES  
                    &none                &none                 &trans                &none     &none                                                                     
      >;
    };

    Num {
      bindings = <
        &none    &kp N7         &kp N8          &kp N9          &none                  &none         &kp PG_UP         &kp UP            &kp PG_DN         &none          
        &kp LGUI &hml_s LALT N4 &hml_s LSHFT N5 &hml_s LCTRL N6 &none                  &none         &hmr_s RCTRL LEFT &hmr_s RSHFT DOWN &hmr_s RALT RIGHT &kp RGUI     
        &none    &kp N1         &kp N2          &kp N3          &kp LC(MINUS)          &kp LC(EQUAL) &kp HOME          &trans            &kp END           &none          
                                &kp DOT         &kp N0          &kp SPACE              &trans        &none
      >;
    };

    Fun {
      bindings = <
        &kp LC(LA(DEL)) &kp F7 &kp F8 &kp F9 &kp F10          &none &none     &none     &none    &none             
        &none           &kp F4 &kp F5 &kp F6 &kp F11          &none &kp LCTRL &kp LSHFT &kp LALT &kp LGUI         
        &none           &kp F1 &kp F2 &kp F3 &kp F12          &none &none     &none     &none    &none  
                               &none  &none  &none            &none &none
      >;
    };

    Button {
      bindings = <
        &kp ESCAPE &kp Q &kp W    &kp E     &kp R          &none  &none    &none    &none    &none     
        &kp LCTRL  &kp A &kp S    &kp D     &kp F          &none  &mkp MB1 &mkp MB2 &mkp MB3 &none    
        &kp LSHIFT &kp Z &kp X    &kp C     &kp V          &kp N1 &kp N2   &kp N3   &kp N4   &kp N5
                         &kp LALT &kp SPACE &kp M          &kp T  &kp B                      
      >;
    };
  };
};
